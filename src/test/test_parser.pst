


let y: bool = (1 =? 1) && true <| x.

let x: int = 1 + xx - 1.
(*
fun foo (X: NAT)(Y : BOOL) -> BOOL {
    let x: bool = true.
    return x.
}

let y: nat = -2.1 + 10 + 1 * 1 / 2 - 3.

let b: bool = true && false || true. 

if (b) {let x: nat = y. return y.} {return 0.}

while (1 =? 1) {
    return foo(1, true).
}
*)